/**
 * 字符串转换整数 (atoi)
 * 示例 1:
 *  输入: "42"
 *  输出: 42
 * 示例 2:
 *  输入: "   -42"
 *  输出: -42
 *  解释: 第一个非空白字符为 '-', 它是一个负号。
 *  我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
 * 示例 3:
 *  输入: "4193 with words"
 *  输出: 4193
 *  解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
 * 示例 4:
 *  输入: "words and 987"
 *  输出: 0
 *  解释: 第一个非空字符是 'w', 但它不是数字或正、负号。因此无法执行有效的转换。
 * 示例 5:
 *  输入: "-91283472332"
 *  输出: -2147483648
 *  解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 因此返回 INT_MIN (−231) 。
 */
var myAtoi = function(str) {
  let reg = new RegExp(/^\s*[+|-]?\d+/g);
  if(reg.test(str) == false){return 0}
  let num = str.match(reg)[0];
  return Math.max( Math.min(num, Math.pow(2, 31) - 1), Math.pow(-2, 31));
};
var res = myAtoi('-91283472332');
console.log(res);